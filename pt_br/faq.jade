
section
  h3(id='models') Como faço para definir modelos?

  p.
    Express tem nenhuma noção de banco de dados ao todo, isto foi deixado
    aos módulos de terceiros do - o que lhe permite
    ter uma interface com praticamente qualquer banco de dados.

section
  h3(id='auth') Como posso autenticar os usuários?
  
  p.
    Esta é outra área que Express não
    aventura-se, você pode usar qualquer esquema de autenticação que você desejar.
    Para um esquema de nome de usuário/senha simples visualizar este <a href="https://github.com/visionmedia/express/tree/master/examples/auth">example</a>.

section
  h3(id='templates') Qual Template Engine o Express suporta?

  p.
    Tudo o que pode se conformar com o <code>(caminho, locals, callback)</code>.
    Para normalizar a interface do mecanismo de modelo e cache é recomendado
    verificar o <a href="https://github.com/visionmedia/consolidate.js">consolidate.js</a>. 
    Motores de modelos não listados ainda pode apoiar o Express.

section
  h3(id='structure') Como devo estruturar minha aplicação?

  p.
    Não há verdadeira resposta a esta pergunta, é altamente dependente
    da escala de sua aplicação e da equipe envolvida. Para ser tão
    flexível possível o Express não faz suposições em termos de estrutura.

  p.
    Rotas e outra lógica específica do aplicativo pode viver em tantos arquivos
    como quiser, em qualquer estrutura de diretórios que você preferir. Ver os seguintes
    exemplos para inspiração:

  ul
    li: a(href='https://github.com/visionmedia/express/blob/master/examples/route-separation/index.js#L19') Route listings
    li: a(href='https://github.com/visionmedia/express/blob/master/examples/route-map/index.js#L47') Route map
    li: a(href='https://github.com/visionmedia/express/tree/master/examples/route-loading') Route bootstrapping
    li: a(href='https://github.com/visionmedia/express/tree/master/examples/mvc') MVC style controllers

  p.
    Também está disponível as extensões de terceiros para o Express simplificar alguns desses padrões:

  ul
    li: a(href='https://github.com/visionmedia/express-resource') Resourceful routing
    li: a(href='https://github.com/visionmedia/express-namespace') Namespaced routing

section
  h3(id='multiple-statics') Como posso servir páginas estáticas de vários diretórios?

  p.
    Você pode normalmente usar qualquer middleware várias vezes
    dentro de sua aplicação. Com a seguinte configuração middleware e um pedido
    a "GET /javascripts/jquery.js" iria verificar primeiro "./public/javascripts/jquery.js",
    se ele não existe, então o middleware subseqüente irá verificar "./files/javascripts/jquery.js".

  +js.
    app.use(express.static('public'));
    app.use(express.static('files'));

setup
  h3(id='static-prefix') Como posso colocar um prefixo no caminho para servir estáticamente?
  
  p.
    O recurso genérico de "montagem" do Connect permite definir
    o "prefixo" do caminho para o qual o middleware será invocado,
    efetivamente se comportando como se essa string com o prefixo nunca foi
    parte do caminho. Suponha que se você quisesse "GET /files/javascripts/jquery.js",
    você pode montar o middleware em "/files", expondo "/javascripts/jquery.js"
    como o <code>req.url</code> permitindo que o middleware possa servir o arquivo:

  +js.
    app.use('/public', express.static('public'));

setup
  h3(id='migration') Como faço para migrar minha aplicação Express 2.x?

  p.
    O Express 2.x provavelmente será apoiado através do node de 1.0 por isso há
    nenhuma razão imediata para atualizar além das refatorações e mudanças na API
    que o Express 3.x introduz, por isso, se você está feliz com 2.x sinta-se livre para
    permanecer nesse ramo. Para mais informações visite a página wiki da migração
    <a href="https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x"> Migração </a>, 
    ou ver uma lista <a href="https://github.com/visionmedia/express/wiki/New-features-in-3.x"> Lista de mudanças </a> feitas na 3.x.

setup
  h3(id='404-handling') Como você lida com 404s?

  p.
    Express 404s não são o resultado de um erro, portanto, a
    middleware de erro do manipulador não irá capturar 404s, isso é
    porque a 404 é simplesmente a ausência de trabalho adicional a fazer,
    em outras palavras, Express executou todos os middleware / rotas
    e descobriu que nenhum deles respondeu. Tudo que você precisa
    fazer é adicionar um middleware na parte inferior abaixo de todos os outros
    para lidar com uma 404:

  +js.
    app.use(function(req, res, next){
      res.send(404, 'Sorry cant find that!');
    });

setup
  h3(id='error-handling') Como você configurar um manipulador de erro no Express?

  p.
    O middleware de tratamento de erros são definidos como middleware regular,
    No entanto deve ser definir com uma aridade de 4, que é a assinatura
    <code>(err, req, res, next)</code>:

  +js.
    app.use(function(err, req, res, next){
      console.error(err.stack);
      res.send(500, 'Something broke!');
    });

  p.
    Veja <a href="/guide.html#error-handling">error-handling</a> para mais informações.

setup
  h3(id='render-html') Como faço para renderizar um HTML simples?
  
  p.
    Você não tem a necessidade de se usar "render" com <code>res.render()</code>,
    se você tem um arquivo específico que você deve usar <code>res.sendfile()</code>, ou
    se você está servindo muitos ativos a partir de um diretório use o middleware <code>express.static()</code>

setup
  h3(id='size') Quão grande é a base de código do Express?

  p.
    Express é um framework muito pequeno, a versão 3.0.0 é apenas
    932 SLOC, e a porção obrigatória de Ligação que Express
    é construído em apenas 267 SLOC. O pacote middleware opcional
    Connect adiciona um adicional de 1.143 SLOC, e são lazy loaded
    quando estão em utilização.

