section
  h3(id='error-handling') Tratamento de Erros

  p.
    O middleware de tratamento de erros são definidos como middleware regular,
    no entanto deve ser definida com um ariridade de 4, que é a assinatura
    <code>(err, req, res, next)</code>:

  +js.
    app.use(function(err, req, res, next){
      console.error(err.stack);
      res.send(500, 'Something broke!');
    });

  p.
    Apesar de não ser obrigatório o middleware de tratamento de erros são normalmente definidos por
    último, abaixo de qualquer outro <code>app.use()</code> chamados como mostrado aqui:

  +js.
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(function(err, req, res, next){
      // logic
    });

  p.
    Respostas de dentro destes middleware são completamente arbitrárias. você pode
    gostar de responder com uma página de erro HTML, uma mensagem simples, uma string JSON,
    ou qualquer outra coisa que você preferir.

  p.
    Para fins de enquadramento organizacional e de alto nível que você pode definir
    vários destes middleware de tratamento de erros, assim como você faria com o
    middleware regular. Por exemplo, suponha que você queira definir um manipulador de erro
    para solicitações feitas via XHR, e aquelas sem, você pode fazer:

  +js.
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(logErrors);
    app.use(clientErrorHandler);
    app.use(errorHandler);

  p.
    Onde as mais genéricas <code>logErrors</code> podem escrever o pedido e
    informações de erro para stderr, loggly ou afins:

  +js.
    function logErrors(err, req, res, next) {
      console.error(err.stack);
      next(err);
    }

  p.
    Onde <code>clientErrorHandler</code> é definido como o seguinte, veja
    que o erro é passado explicitamente ao longo do próximo.

  +js.
    function clientErrorHandler(err, req, res, next) {
      if (req.xhr) {
        res.send(500, { error: 'Something blew up!' });
      } else {
        next(err);
      }
    }

  p.
    A seguir <code>errorHandler</code> a implementação "catch-all" pode ser definida como:

  +js.
    function errorHandler(err, req, res, next) {
      res.status(500);
      res.render('error', { error: err });
    }